name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven
      - name: Set up Git
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

      - name: Get the version from pom.xml
        id: vars
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "::set-output name=VERSION::$VERSION"

      - name: Create Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag -a "v${{ steps.vars.outputs.VERSION }}" -m "Tagging version ${{ steps.vars.outputs.VERSION }}"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} v${{ steps.vars.outputs.VERSION }}

      - name: Build with Maven
        run: mvn clean package

      - name: Run unit tests
        run: mvn test


      - name: Build Docker image
        run: docker build -t dream-project:${{ steps.vars.outputs.VERSION }} .

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}


      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_REPO }}/dream-project:${{ steps.vars.outputs.VERSION }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy to Staging
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          trap 'exit 0' ERR
          aws ecs update-service --cluster my-cluster --service dream --force-new-deployment --region us-east-1

  deploy-production:
    runs-on: ubuntu-latest
    needs: request-approval
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Deploy to Production
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          trap 'exit 0' ERR
          aws ecs update-service --cluster my-cluster --service dream --force-new-deployment --region us-east-1

  request-approval:
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: Request Approval
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              required_contexts: [],
              environment:'production'
            })
